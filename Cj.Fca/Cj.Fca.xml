<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cj.Fca</name>
    </assembly>
    <members>
        <member name="T:Cj.Fca.Context">
            <summary>
            Represents a binary formal context document. A formal context consists of objects and attributes and a incidence relation
            between objects and attributes. For the structure and usage see context markup description (context.xsd).
            </summary>
        </member>
        <member name="P:Cj.Fca.Context.W3boolFalseString">
            <summary>
            https://www.w3.org/TR/xmlschema-2/#boolean
            </summary>
        </member>
        <member name="P:Cj.Fca.Context.W3boolTrueString">
            <summary>
            https://www.w3.org/TR/xmlschema-2/#boolean
            </summary>
        </member>
        <member name="T:Cj.Fca.Context.ItemKind">
            <summary>
            Defines the kind of context items for the well defined context document.
            </summary>
        </member>
        <member name="F:Cj.Fca.Context.ItemKind.Generic">
            <summary>Set is interpreted as an object or attribute belonging to given item.</summary>
        </member>
        <member name="F:Cj.Fca.Context.ItemKind.Attribute">
            <summary>Empty set is interpreted as an attribute item.</summary>
        </member>
        <member name="F:Cj.Fca.Context.ItemKind.Object">
            <summary>Empty set is interpreted as an object item.</summary>
        </member>
        <member name="M:Cj.Fca.Context.Validate(System.String@,System.Xml.Linq.XDocument)">
            <summary>
            This static function validates the given XML file against an XSD format specification that is defined by <see cref="M:Cj.Fca.Context.XsdMarkup"/> as an embedded resource (Context.xsd).
            </summary>
            <param name="Protocol">Contains error messages if format errors are detected.</param>
            <param name="XmlData">XML data to be checked.</param>
            <returns>True if there are no errors, otherwise false. Errors can be looked up in the protocol back from this procedure.</returns>
        </member>
        <member name="M:Cj.Fca.Context.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Cj.Fca.Context.#ctor(System.String)">
            <summary>
            Creates a valid context document.
            </summary>
            <param name="XmlFile">XML file to be read.</param>
        </member>
        <member name="M:Cj.Fca.Context.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Creates a valid context document.
            </summary>
            <param name="XmlData">XML data to be read.</param>
        </member>
        <member name="M:Cj.Fca.Context.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a document by default with one context item.
            </summary>
            <param name="Title">Title of context.</param>
            <param name="SubTitle">Subtitle of context.</param>
            <param name="ObjectLabel">Object label of context item.</param>
            <param name="AttributeLabel">Attribute label of context item.</param>
            <param name="Value">Binary value of context item.</param>
        </member>
        <member name="M:Cj.Fca.Context.IsNull">
            <summary>
            Checks whether context document is defined. 
            </summary>
            <returns>Returns true if context document is null, otherwise false.</returns>
        </member>
        <member name="M:Cj.Fca.Context.ToString">
            <summary>
            Returns the intended XML document.
            </summary>
            <returns>Returns the intended XML document.</returns>
        </member>
        <member name="M:Cj.Fca.Context.Save(System.String)">
            <summary>
            Saves context data to disk.
            </summary>
            <param name="XmlFile">File name.</param>
        </member>
        <member name="M:Cj.Fca.Context.XsdMajorVersion">
            <summary>
            XSD major version.
            </summary>
            <returns>Returns XSD major version.</returns>
        </member>
        <member name="M:Cj.Fca.Context.XsdMinorVersion">
            <summary>
            XSD minor version.
            </summary>
            <returns>Returns XSD minor version.</returns>
        </member>
        <member name="M:Cj.Fca.Context.XsdPatchVersion">
            <summary>
            XSD patch version.
            </summary>
            <returns>Returns XSD patch version.</returns>
        </member>
        <member name="M:Cj.Fca.Context.DocumentUri">
            <summary>
            Base URI will be set by constructor if XML file is read.
            </summary>
            <returns>Document URI belonging to formal context if exists.</returns>
        </member>
        <member name="M:Cj.Fca.Context.DocumentPath">
            <summary>
            Path will be set by constructor if XML file is read.
            </summary>
            <returns>Document path in its unescaped representation belonging to formal context if exists.</returns>
        </member>
        <member name="M:Cj.Fca.Context.MaxCountOfConcepts">
            <summary>
            Calculates the maximum number of formal concepts.
            </summary>
            <returns>Maximum number of formal concepts.</returns>
        </member>
        <member name="M:Cj.Fca.Context.MaxCountOfImplications">
            <summary>
            Calculates the maximum number of implications.
            </summary>
            <returns>Maximum number of implications.</returns>
        </member>
        <member name="M:Cj.Fca.Context.GetContextDocument">
            <summary>
            Creates a deep copy of given context document.
            </summary>
            <returns>Returns a copy of the underlying XML document.</returns>
        </member>
        <member name="M:Cj.Fca.Context.FindConceptsByIterationAsync(Cj.Fca.Context.ItemKind)">
            <summary>
            Computes all formal concepts of given context by iteration, i.e., every extent resp. intent is the intersection of
            attribute extents resp. object intents.
            </summary>
            <param name="Kind">The kind parameter is used to start the computation over attributes or objects. If
            set to generic, the computation starts with the smallest size of given context items.</param>
            <returns>List of concepts according to their order of computation.</returns>
        </member>
        <member name="M:Cj.Fca.Context.FindConceptsByPowerSetAsync(Cj.Fca.Context.ItemKind)">
            <summary>
            Computes all formal concepts of given context by naive algorithm, i.e., each item of the power set of
            attribute or object items is checked with the help of the derivation operator whether A = A'' is true.
            </summary>
            <param name="Kind">The kind parameter is used to start the computation over attributes or objects. If
            set to generic, the computation starts with the smallest size of given context items.</param>
            <returns>Sorted list of concepts.</returns>
        </member>
        <member name="M:Cj.Fca.Context.FindConceptsByPowerSetParallelAsync(System.Threading.CancellationTokenSource,Cj.Fca.Context.ItemKind,System.Int32)">
            <summary>
            Computes all formal concepts of given context by naive algorithm concurrently, i.e., each item of the power set of
            attribute or object items is checked with the help of the derivation operator whether A = A'' is true.
            </summary>
            <param name="Cancellation">Signals cancellation.</param>
            <param name="Kind">The kind parameter is used to start the computation over attributes or objects. If
            set to generic, the computation starts with the smallest size of given context items.</param>
            <param name="MaxDegreeOfParallelism">Degree of parallelism to be used to find concepts concurrently.</param>
            <returns>Sorted list of concepts.</returns>
        </member>
        <member name="M:Cj.Fca.Context.CompareConceptLatticeToAsync(System.ValueTuple{System.Xml.Linq.XElement[],System.Xml.Linq.XElement[]}[])">
            <summary>
            Compares to a list of formal concepts.
            </summary>
            <param name="ConceptLattice">Right list of formal concepts to be compared.</param>
            <returns>True if concept lattice equals right concept lattice based on the same context data, otherwise false.</returns>
        </member>
        <member name="M:Cj.Fca.Context.IsValid">
            <summary>
            Checks whether context document is valid.
            </summary>
            <returns>Returns true if context document is valid, otherwise false.</returns>
        </member>
        <member name="M:Cj.Fca.Context.GetTitle">
            <summary>
            Title of context document that is required by XML schema.
            </summary>
            <returns>Title of context document.</returns>
        </member>
        <member name="M:Cj.Fca.Context.GetAttributes">
            <summary>
            Attribute declarations of given context document.
            </summary>
            <returns>Returns the array of attribute declarations.</returns>
        </member>
        <member name="M:Cj.Fca.Context.GetAttributes(System.Int32[])">
            <summary>
            Selected attribute declarations of given context document.
            </summary>
            <returns>Returns a sorted set of attribute declarations defined by an array of selected index positions. If an index does not exist, the return value is an empty array.</returns>
        </member>
        <member name="M:Cj.Fca.Context.GetObjects">
            <summary>
            Object declarations of given context document.
            </summary>
            <returns>Returns the array of object declarations.</returns>
        </member>
        <member name="M:Cj.Fca.Context.GetObjects(System.Int32[])">
            <summary>
            Selected object declarations of given context document.
            </summary>
            <returns>Returns a sorted set of object declarations defined by an array of selected index positions. If an index does not exist, the return value is an empty array.</returns>
        </member>
        <member name="M:Cj.Fca.Context.GetObject(System.Int32)">
            <summary>
            Object declaration of given object by index position.
            </summary>
            <param name="Index">Requested index position.</param>
            <returns>Returns object declaration at index position.</returns>
        </member>
        <member name="M:Cj.Fca.Context.GetAttribute(System.Int32)">
            <summary>
            Attribute declaration of given attribute by index position.
            </summary>
            <param name="Index">Requested index position.</param>
            <returns>Returns attribute declaration at index position.</returns>
        </member>
        <member name="M:Cj.Fca.Context.Row(System.Int32)">
            <summary>
            Row at given index position.
            </summary>
            <param name="Index">Index to be set in the range from 1 to n.</param>
            <returns>Returns the row that consists of all columns in an ascending order of column index that belong to the row position.</returns>
        </member>
        <member name="M:Cj.Fca.Context.Column(System.Int32)">
            <summary>
            Column at given index position.
            </summary>
            <param name="Index">Index to be set in the range from 1 to n.</param>
            <returns>Returns the column that consists of all rows in an ascending order of row index that belong to the row position.</returns>
        </member>
        <member name="M:Cj.Fca.Context.Cell(System.Int32,System.Int32)">
            <summary>
            Cell at given row and column index position.
            </summary>
            <param name="RowIndex">Row index to be set in the range from 1 to n.</param>
            <param name="ColumnIndex">Column index to be set in the range from 1 to n.</param>
            <returns>Returns the cell at the specified row and column index position.</returns>
        </member>
        <member name="M:Cj.Fca.Context.CellValue(System.Int32,System.Int32)">
            <summary>
            Boolean value at given cell position.
            </summary>
            <param name="RowIndex">Row index to be set in the range from 1 to n.</param>
            <param name="ColumnIndex">Column index to be set in the range from 1 to n.</param>
            <returns>Returns boolean value.</returns>
            <remarks>Throws an exception if cell is not defined.</remarks>
        </member>
        <member name="M:Cj.Fca.Context.IsTrue(System.Int32,System.Int32)">
            <summary>
            Boolean value at given cell position.
            </summary>
            <param name="RowIndex">Row index to be set in the range from 1 to n.</param>
            <param name="ColumnIndex">Column index to be set in the range from 1 to n.</param>
            <returns>Returns true if the value at the specified cell position is true, otherwise false.</returns>
        </member>
        <member name="M:Cj.Fca.Context.IsFalse(System.Int32,System.Int32)">
            <summary>
            Boolean value at given cell position.
            </summary>
            <param name="RowIndex">Row index to be set in the range from 1 to n.</param>
            <param name="ColumnIndex">Column index to be set in the range from 1 to n.</param>
            <returns>Returns true if the value at the specified cell position is false, otherwise false.</returns>
        </member>
        <member name="M:Cj.Fca.Context.CheckPrimaryKeysAsync(Cj.Fca.Context.ItemKind)">
            <summary>
            Checks primary keys if there are exist.
            </summary>
            <param name="Kind">Kind of context item to be checked.</param>
            <returns>True if successful, otherwise false in case of unresolved or dangling keys.</returns>
        </member>
        <member name="T:Cj.Fca.ContextExtensions">
            <summary>
            Some helper functions.
            </summary>
        </member>
        <member name="M:Cj.Fca.ContextExtensions.ToHtml(System.String[],System.String,System.Boolean)">
            <summary>
            Converts protocol strings to simple HTML page with fixed font face set to Courier New.
            </summary>
            <param name="Protocol">Text to be converted.</param>
            <param name="Title">Title of HTML page.</param>
            <param name="Wrap">Determines if text should be wrapped.</param>
            <returns>HTML text that can be shown by a browser.</returns>
        </member>
        <member name="M:Cj.Fca.ContextExtensions.FormatItem(System.Xml.Linq.XElement,Cj.Fca.Context.ItemKind)">
            <summary>
            Returns a string representation of an item according to the XSD standard.
            </summary>
            <param name="Item">Attribute or object item to be converted.</param>
            <param name="Kind">Kind of context item.</param>
            <returns></returns>
        </member>
        <member name="M:Cj.Fca.ContextExtensions.ToString(System.Xml.Linq.XElement[],System.Boolean)">
            <summary>
            Serializes an XML vector to a string representation. It can be used to convert extents and/or intents to a string object.
            </summary>
            <see cref="M:Cj.Fca.ContextExtensions.ToHtml(System.String[],System.String,System.Boolean)"/>
            <param name="Items">Items to be converted to string representation.</param>
            <param name="WithLabel">True if label should be written instead of index.</param>
            <returns>Serialized XML item to string.</returns>
        </member>
        <member name="M:Cj.Fca.ContextExtensions.ToString(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Serializes an XML item to a string representation. It can be used to convert labels to a string object.
            </summary>
            <see cref="M:Cj.Fca.ContextExtensions.ToHtml(System.String[],System.String,System.Boolean)"/>
            <param name="Item">Item to be converted to string representation.</param>
            <param name="WithLabel">True if label should be written instead of index.</param>
            <returns>Serialized XML item to string.</returns>
        </member>
        <member name="M:Cj.Fca.ContextExtensions.ToString(System.Xml.Linq.XElement[],System.Xml.Linq.XElement[],System.Boolean)">
            <summary>
            Serializes an XML vector tuple to a string representation. It can be used to convert concept items to a string object.
            </summary>
            <param name="Extent">Extent items to be converted to string representation.</param>
            <param name="Intent">Intent items to be converted to string representation.</param>
            <param name="WithLabel">True if label should be written instead of index.</param>
            <returns>Serialized XML tuple to string.</returns>
        </member>
        <member name="M:Cj.Fca.ContextExtensions.ToString(Cj.Fca.Context,System.ValueTuple{System.ValueTuple{System.Xml.Linq.XElement[],System.Xml.Linq.XElement[]},System.ValueTuple{System.Nullable{System.Int32},System.Nullable{System.Int32}}})">
            <summary>
            Serializes an XML tuple to a string representation. It can be used to convert concept items to a string object.
            </summary>
            <param name="DataContext">Given formal context.</param>
            <param name="ConceptWithLabels">Given concept lattice with reduced labeling.</param>
            <returns></returns>
        </member>
        <member name="M:Cj.Fca.ContextExtensions.ToString(System.ValueTuple{System.Xml.Linq.XElement[],System.Xml.Linq.XElement[],System.Xml.Linq.XElement[]},System.Boolean)">
            <summary>
            Serializes an implication to a string representation. An implication consists of two sets where A' is a subset ob B'.
            </summary>
            <param name="Implication">Implication to be converted to string representation.</param>
            <param name="WithSupportItems">True if support items should be enumerated, otherwise false.</param>
            <returns>Serialized XML tuple to string.</returns>
        </member>
        <member name="M:Cj.Fca.ContextExtensions.ToString(System.ValueTuple{System.Xml.Linq.XElement[],System.Xml.Linq.XElement[]})">
            <summary>
            Serializes an implication to a string representation. An implication consists of two sets where A' is a subset ob B'.
            </summary>
            <param name="Implication">Implication to be converted to string representation.</param>
            <returns>Serialized XML tuple to string.</returns>
        </member>
        <member name="M:Cj.Fca.ContextExtensions.SaveAsHtmlAsync(Cj.Fca.Context)">
            <summary>
            Writes context data to disc.
            </summary>
            <param name="DataContext">Given formal context.</param>
        </member>
        <member name="M:Cj.Fca.ContextExtensions.SaveAsTextAsync(Cj.Fca.Context)">
            <summary>
            Writes context data to disc.
            </summary>
            <param name="DataContext">Given formal context.</param>
        </member>
        <member name="M:Cj.Fca.ContextExtensions.ToHtml(Cj.Fca.Context)">
            <summary>
            Converts the XML data structure of formal context to HTML table.
            </summary>
            <returns>Lines of HTML document.</returns>
        </member>
        <member name="M:Cj.Fca.ContextExtensions.ToText(Cj.Fca.Context)">
            <summary>
            Converts the XML data structure of formal context to text table.
            </summary>
            <returns>Lines of text document.</returns>
        </member>
        <member name="M:Cj.Fca.ContextExtensions.ToStringArray(Cj.Fca.Context,System.Boolean)">
            <summary>
            Converts the XML data structure of formal context to an ASCII or HTML table.
            </summary>
            <param name="DataContext">Given formal context.</param>
            <param name="AsHtml">Should be true if HTML format is required otherwise false.</param>
            <returns>Lines of ASCII or HTML document.</returns>
        </member>
    </members>
</doc>
